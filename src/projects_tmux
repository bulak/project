#!/usr/bin/env bash

# projects - tmux based -

# TODO (fir init_layouts)
#
# - get rid of 'save' and tmuxp dependency :OK:
# - figure out starting a session with a predefined layout/commands
# - this is possible for screen - and we already ditched 'save' there
# - the idea is to have different predefined project layouts to choose from
# - 'save' is not working well anyways. For our purpopses, saving is not
#   really useful. Getting the layouts from an interrupted R session does not
#   help!

# for example:
# projects init project_name [project_type]
# user@host:~/some/dir/to/cool_stuff$ project init cool_stuff sequencing
# if project_type is not provided then look for layout named default
# if not present just call tmux otherwise call with default layout

:<<'LICENSE'
MIT License

Copyright (c) 2018 A. Bulak Arpat

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
LICENSE

# Constants
DESCR="\"projects\" is a simple shell script that manages tmux based projects"
VERSION="3.3"

PROJECTS_HOME="${HOME}/.projects"
PROJECT_EXT=".project"
HEADER_FORMAT='%-20s%-12s%-10s%-7s\n'
ROW_FORMAT='\e[1m%-20s\e[0m%-12s%-10s\e[1m%7s\e[0m\n'
P_PRESENT=1
P_ACTIVE=2
# P_FUTURE_ATTR=4

# lock command present
if command -v lockfile >/dev/null 2>&1; then
  lock="lockfile"
elif command -v flock >/dev/null 2>&1; then
  lock="flock"
else
  echo "Could not find 'lockfile' or 'flock'."
  echo "Can't work without having one of the two. Please install first"
  exit 1
fi

# Functions
version() {
  echo "projects [tmux], version ${VERSION}"
}

usage(){
  cat <<EOF
$(version)

$DESCR

Usage: $0 COMMAND [PROJECT_NAME]

COMMAND        Mandatory. Has to be one of:
               init   : Initiates a new project with PROJECT_NAME
               resume : Resumes the project PROJECT_NAME
               info   : Prints information about the project PROJECT_NAME
               kill   : Kills the project PROJECT NAME
               list   : Lists all projects sorted by last accession dates
               help   : Prints this info
               version: Prints the version of the program

PROJECT_NAME   Name of the project, spaces are NOT allowed.

EOF
  exit 1
}


is_set() {
  [[ -n "${1}" ]] && local test_bid="${1}" || return 1
  if ((cur_info & test_bid)); then
    return 0
  else
    return 1
  fi
}

is_not_set() {
  [[ -n "${1}" ]] && local test_bid="${1}" || return 1
  if ((~cur_info & test_bid)); then
    return 0
  else
    return 1
  fi
}

protect() {
  echo "$2" > $1 && echo "$(date +"%Y-%m-%d")" >> $1 && chmod a-w $1
}

get_single_arg() {
  local arg_as_array=( $1 )
  local array_len=${#arg_as_array[@]}
  [ "${array_len}" -gt "1" ] && exit
  echo "${arg_as_array[0]}"
}

remove_lock() {
  if [ ${lock} = "flock" ]; then
    flock -u 300
  fi
  [ -f "${1}" ] && /bin/rm -f "${1}"
}

declare -A date_created=()
declare -A date_accessed=()
declare -a all_projects=()
get_all_projects() {
  local prodat
  read -r -a prodat <<< $(find ${PROJECTS_HOME} -type f \
    -name *${PROJECT_EXT} -printf "%f %TY-%Tm-%Td\n" \
    | sed "s/${PROJECT_EXT}//g" | sort -k2r | tr '\n' ' ')
  for ((i=0;i<${#prodat[@]};i=i+2)); do
    j=$((i + 1))
    all_projects+=(${prodat[${i}]})
    date_accessed[${prodat[${i}]}]=${prodat[${j}]}
  done
}


set_project_info() {
  local project_name=$1
  [ -z ${project_name} ] && return 1

  cur_project_base="${PROJECTS_HOME}/${project_name}"
  cur_project_file="${cur_project_base}${PROJECT_EXT}"

  # Bit flags
  bits=0
  [ -f "${cur_project_file}" ] && bits=$((bits + P_PRESENT))
  tmux has-session -t =${project_name} >/dev/null 2>&1 && bits=$((bits + P_ACTIVE))
  cur_info=$bits

  # Read project file if exists
  if ((cur_info & P_PRESENT)); then
    readarray -t cur_project_info < ${cur_project_file}
  fi

  # Figure out project home dir
  if test "${cur_project_info[0]+isset}"; then
    cur_project_path="${cur_project_info[0]}"
  fi
  [ -z "${cur_project_path}" ] && cur_project_path=$(pwd)

  # Check creation time
  if test "${cur_project_info[1]+isset}"; then
    date_created[$project_name]="${cur_project_info[1]}"
  else
    date_created[$project_name]="Unknown"
  fi
  return 0
}

print_headers() {
    printf ${HEADER_FORMAT} "Project" "Created" "Accessed" " Active"
    printf ${HEADER_FORMAT} "-------" "-------" "--------" " ------"
}

print_project_info() {
  local project_name=$1
  #local checkmark="...\xe2\x9c\x93"
  local checkmark="*"
  local is_active
  [ -z ${project_name} ] && { echo "Need a PROJECT_NAME"; return 1; }
  set_project_info "${project_name}"
  local is_created="${date_created[${project_name}]}"
  local is_accessed="${date_accessed[${project_name}]}"
  [ -z ${is_created} ] && is_created=" --"
  is_set "${P_ACTIVE}" && is_active="${checkmark}  " || is_active=" "
  printf ${ROW_FORMAT} "${project_name}" "${is_created}" "${is_accessed}" "${is_active}"
}

set_history_and_new_tmux() {
  export PROJECT_NAME=$1
  export PROMPT_COMMAND='echo -ne "\033]0;[ ${PROJECT_NAME} ]@${HOSTNAME}\007"'
  [ -n "$2" ] && cd "$2" && export PROJECT_HOME="$2"
  if [ -z "$3" ]; then
    tmux new-session -s $1
  else
    tmux new-session -s $1 "tmux source-file ${3}"
  fi
  exit 0
}

set_history_and_attach_tmux() {
  export PROJECT_NAME=$1
  export PROJECT_HOME="$2"
  export PROMPT_COMMAND='echo -ne "\033]0;[ ${PROJECT_NAME} ]@${HOSTNAME}\007"'
  tmux attach -t $1
  exit 0
}

# Set up variables
cur_command=$(get_single_arg "${1}")
cur_project=$(get_single_arg "${2}")
cur_layout=$(get_single_arg "${3}")

[ -z "${cur_command}" ] && usage
[ -d ${PROJECTS_HOME} ] || mkdir -p ${PROJECTS_HOME}
if [ -n "${cur_project}" ]; then
  set_project_info "${cur_project}"
  project_lock="${cur_project_base}.lock"
  if [ ${lock} = "lockfile" ]; then
    lockfile -r 0 ${project_lock} || {
      echo "This project is locked by another 'tmux' process"; exit 1; }
  else
    exec 300>${project_lock}
    flock -n 300 || {
      echo "This project is locked by another 'tmux' process"; exit 1; }
  fi
  trap "remove_lock ${project_lock}; exit 1" 0 1 2 3 13 15
fi

# Set-up layout file
[ -z "${cur_layout}" ] && cur_layout="default"
cur_layout_file="${PROJECTS_HOME}/${cur_layout}.tmux.layout"
[ ! -f "${cur_layout_file}" ] && cur_layout_file=""

# Execute the command
case "${cur_command}" in
  init)
    if is_set $P_PRESENT && is_set $P_ACTIVE; then
      echo "[${cur_project}] was already created and is active. Either 'kill' this\
 project or 'resume' to attach to tmux session"
      exit 0
    elif is_set $P_PRESENT; then
      echo "[${cur_project}] was already created. However; it is neither active\
 nor saved. Either first 'kill' then 'init' for a new project, or 'resume' to attach
 a new tmux session. In all cases, the project history file will be recovered, but
 last state is lost."
      exit 0
    elif is_set $P_ACTIVE && is_not_set $P_PRESENT; then
      read -r -p "[${cur_project}] is an active tmux session.  Attach to current\
 tmux session to initiate a project? [Y/n] " response
      case $response in
        [nN][oO]|[nN])
          exit 0
        ;;
        *)
          echo "we should be here"
          protect "${cur_project_file}" "${cur_project_path}"
          set_history_and_attach_tmux ${cur_project} "${cur_project_path}"
        ;;
      esac
    else
      protect "${cur_project_file}" "${cur_project_path}"
      set_history_and_new_tmux ${cur_project} "${cur_project_path}" "${cur_layout_file}"
    fi
  ;;
  resume)
    if is_set $P_PRESENT && is_set $P_ACTIVE; then
      touch -m ${cur_project_file} && \
      set_history_and_attach_tmux ${cur_project} "${cur_project_path}"
    elif is_set $P_PRESENT; then
      touch -m ${cur_project_file} && \
      set_history_and_new_tmux ${cur_project} "${cur_project_path}"
    elif is_set $P_ACTIVE && is_not_set $P_PRESENT; then
      echo "[${cur_project}] is not present but there is an active tmux\
 session. Use 'init' to initiate a new project from that session"
    else
      echo "[${cur_project}] is not present or active. Can't resume, try 'init'"
      exit 1
    fi
  ;;
  info)
    get_all_projects
    print_headers
    print_project_info "${cur_project}"
    exit 0
  ;;
  kill)
    read -r -p "Are you sure that you want to kill [${cur_project}]? This\
 will remove all locks, saved states; only history files will remain.\
 [y/N] " response
    case $response in
      [yY][eE][sS]|[yY])
        rm -f ${cur_project_file}
        tmux kill-session -t ${cur_project}
      ;;
      *)
        exit 0
      ;;
    esac
  ;;
  list)
    get_all_projects
    print_headers
    for key in "${all_projects[@]}"; do
      print_project_info "${key}"
    done
  ;;
  help)
    usage
    exit 0
  ;;
  version)
    version
    exit 0
  ;;
  *)
    echo "Command can be one of [init, resume, kill, list, info, help, version]"
    usage
  ;;
esac

